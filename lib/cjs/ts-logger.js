'use strict';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */


function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var _LoggerServices_instances, _LoggerServices_isTime, _LoggerServices_isDate, _LoggerServices_isFullYear, _LoggerServices_isBg, _LoggerServices_colors, _LoggerServices_bNumb, _LoggerServices_bDate, _LoggerServices_bTime, _LoggerServices_bConsoleText, _LoggerServices_bConsoleBg;
class LoggerServices {
    constructor() {
        _LoggerServices_instances.add(this);
        _LoggerServices_isTime.set(this, true);
        _LoggerServices_isDate.set(this, true);
        _LoggerServices_isFullYear.set(this, false);
        _LoggerServices_isBg.set(this, false);
        _LoggerServices_colors.set(this, {
            reset: "\x1b[0m",
            bright: "\x1b[1m",
            dim: "\x1b[2m",
            underscore: "\x1b[4m",
            blink: "\x1b[5m",
            reverse: "\x1b[7m",
            hidden: "\x1b[8m",
            fg: {
                black: "\x1b[30m",
                red: "\x1b[31m",
                brightRed: "\x1b[91m",
                green: "\x1b[32m",
                brightGreen: "\x1b[92m",
                yellow: "\x1b[33m",
                brightYellow: "\x1b[93m",
                blue: "\x1b[34m",
                brightBlue: "\x1b[94m",
                magenta: "\x1b[35m",
                brightMagenta: "\x1b[95m",
                cyan: "\x1b[36m",
                white: "\x1b[37m",
                brightWhite: "\x1b[97m",
                gray: "\x1b[90m",
                crimson: "\x1b[38m"
            },
            bg: {
                black: "\x1b[40m",
                red: "\x1b[41m",
                brightRed: "\x1b[101m",
                green: "\x1b[42m",
                brightGreen: "\x1b[102m",
                yellow: "\x1b[43m",
                brightYellow: "\x1b[103m",
                blue: "\x1b[44m",
                brightBlue: "\x1b[104m",
                magenta: "\x1b[45m",
                brightMagenta: "\x1b[105m",
                cyan: "\x1b[46m",
                white: "\x1b[47m",
                brightWhite: "\x1b[107m",
                gray: "\x1b[100m",
                crimson: "\x1b[48m"
            }
        });
    }
    space() {
        console.log();
    }
    clear() {
        console.clear();
    }
    group(nameGroup = '') {
        console.group(nameGroup);
    }
    endGroup() {
        console.groupEnd();
    }
    disableBg() {
        __classPrivateFieldSet(this, _LoggerServices_isBg, false, "f");
    }
    enableBg() {
        __classPrivateFieldSet(this, _LoggerServices_isBg, true, "f");
    }
    disableFullYear() {
        __classPrivateFieldSet(this, _LoggerServices_isFullYear, false, "f");
    }
    enableFullYear() {
        __classPrivateFieldSet(this, _LoggerServices_isFullYear, true, "f");
    }
    disableTime() {
        __classPrivateFieldSet(this, _LoggerServices_isTime, false, "f");
    }
    enableTime() {
        __classPrivateFieldSet(this, _LoggerServices_isTime, true, "f");
    }
    disableDate() {
        __classPrivateFieldSet(this, _LoggerServices_isDate, false, "f");
    }
    enableDate() {
        __classPrivateFieldSet(this, _LoggerServices_isDate, true, "f");
    }
    disableTimePeriod() {
        __classPrivateFieldSet(this, _LoggerServices_isDate, false, "f");
        __classPrivateFieldSet(this, _LoggerServices_isTime, false, "f");
    }
    enableTimePeriod() {
        __classPrivateFieldSet(this, _LoggerServices_isDate, true, "f");
        __classPrivateFieldSet(this, _LoggerServices_isTime, true, "f");
    }
    bTimePeriod() {
        const cDate = new Date();
        let sTime = '';
        let sDate = '';
        if (__classPrivateFieldGet(this, _LoggerServices_isDate, "f"))
            sDate = __classPrivateFieldGet(this, _LoggerServices_instances, "m", _LoggerServices_bDate).call(this, cDate);
        if (__classPrivateFieldGet(this, _LoggerServices_isTime, "f"))
            sTime = __classPrivateFieldGet(this, _LoggerServices_instances, "m", _LoggerServices_bTime).call(this, cDate);
        if (__classPrivateFieldGet(this, _LoggerServices_isTime, "f") && __classPrivateFieldGet(this, _LoggerServices_isDate, "f"))
            return `${sTime}  ${sDate}  `;
        if (__classPrivateFieldGet(this, _LoggerServices_isTime, "f"))
            return `${sTime}  `;
        if (__classPrivateFieldGet(this, _LoggerServices_isDate, "f"))
            return `${sDate}  `;
        return '';
    }
    bConsole(mes, color) {
        __classPrivateFieldGet(this, _LoggerServices_isBg, "f")
            ? __classPrivateFieldGet(this, _LoggerServices_instances, "m", _LoggerServices_bConsoleBg).call(this, mes, color)
            : __classPrivateFieldGet(this, _LoggerServices_instances, "m", _LoggerServices_bConsoleText).call(this, mes, color);
    }
}
_LoggerServices_isTime = new WeakMap(), _LoggerServices_isDate = new WeakMap(), _LoggerServices_isFullYear = new WeakMap(), _LoggerServices_isBg = new WeakMap(), _LoggerServices_colors = new WeakMap(), _LoggerServices_instances = new WeakSet(), _LoggerServices_bNumb = function _LoggerServices_bNumb(numb) {
    return (numb < 10) ? '0' + numb : `${numb}`;
}, _LoggerServices_bDate = function _LoggerServices_bDate(date) {
    const day = __classPrivateFieldGet(this, _LoggerServices_instances, "m", _LoggerServices_bNumb).call(this, date.getDate());
    const month = __classPrivateFieldGet(this, _LoggerServices_instances, "m", _LoggerServices_bNumb).call(this, date.getMonth() + 1);
    const fullYear = date.getFullYear();
    const year = __classPrivateFieldGet(this, _LoggerServices_isFullYear, "f") ? fullYear : String(fullYear).slice(2);
    return `${day}.${month}.${year}`;
}, _LoggerServices_bTime = function _LoggerServices_bTime(date) {
    const hours = __classPrivateFieldGet(this, _LoggerServices_instances, "m", _LoggerServices_bNumb).call(this, date.getHours());
    const min = __classPrivateFieldGet(this, _LoggerServices_instances, "m", _LoggerServices_bNumb).call(this, date.getMinutes());
    const sec = __classPrivateFieldGet(this, _LoggerServices_instances, "m", _LoggerServices_bNumb).call(this, date.getSeconds());
    return `${hours}:${min}:${sec}`;
}, _LoggerServices_bConsoleText = function _LoggerServices_bConsoleText(mes, color) {
    const colorTxt = __classPrivateFieldGet(this, _LoggerServices_colors, "f").fg[color];
    if (!__classPrivateFieldGet(this, _LoggerServices_isTime, "f") && !__classPrivateFieldGet(this, _LoggerServices_isDate, "f")) {
        console.log(colorTxt, mes, __classPrivateFieldGet(this, _LoggerServices_colors, "f").reset);
    }
    else {
        console.log(colorTxt, this.bTimePeriod(), mes, __classPrivateFieldGet(this, _LoggerServices_colors, "f").reset);
    }
}, _LoggerServices_bConsoleBg = function _LoggerServices_bConsoleBg(mes, color) {
    const isWhiteColorArr = [
        'brightBlue',
        'brightRed',
        'brightMagenta'
    ];
    const typeColor = isWhiteColorArr.includes(color)
        ? 'brightWhite'
        : 'black';
    const colorTxt = __classPrivateFieldGet(this, _LoggerServices_colors, "f").fg[typeColor];
    const colorBg = __classPrivateFieldGet(this, _LoggerServices_colors, "f").bg[color];
    if (!__classPrivateFieldGet(this, _LoggerServices_isTime, "f") && !__classPrivateFieldGet(this, _LoggerServices_isDate, "f")) {
        console.log(colorBg, colorTxt, mes, __classPrivateFieldGet(this, _LoggerServices_colors, "f").reset);
    }
    else {
        console.log(colorBg, colorTxt, this.bTimePeriod(), mes, __classPrivateFieldGet(this, _LoggerServices_colors, "f").reset);
    }
};

class Logger extends LoggerServices {
    type(mes) {
        this.bConsole(mes, 'brightWhite');
    }
    mes(mes) {
        this.bConsole(mes, 'brightMagenta');
    }
    info(mes) {
        this.bConsole(mes, 'brightBlue');
    }
    success(mes) {
        this.bConsole(mes, 'brightGreen');
    }
    warn(mes) {
        this.bConsole(mes, 'brightYellow');
    }
    error(mes) {
        this.bConsole(mes, 'brightRed');
    }
    typeBg(mes) {
        this.enableBg();
        this.bConsole(mes, 'brightWhite');
        this.disableBg();
    }
    mesBg(mes) {
        this.enableBg();
        this.bConsole(mes, 'brightMagenta');
        this.disableBg();
    }
    infoBg(mes) {
        this.enableBg();
        this.bConsole(mes, 'brightBlue');
        this.disableBg();
    }
    successBg(mes) {
        this.enableBg();
        this.bConsole(mes, 'brightGreen');
        this.disableBg();
    }
    warnBg(mes) {
        this.enableBg();
        this.bConsole(mes, 'brightYellow');
        this.disableBg();
    }
    errorBg(mes) {
        this.enableBg();
        this.bConsole(mes, 'brightRed');
        this.disableBg();
    }
    oneMes(mes) {
        this.clear();
        this.mes(mes);
    }
    oneSuccess(mes) {
        this.clear();
        this.success(mes);
    }
    oneType(mes) {
        this.clear();
        this.type(mes);
    }
    oneWarn(mes) {
        this.clear();
        this.warn(mes);
    }
    oneError(mes) {
        this.clear();
        this.error(mes);
    }
}

const logger = new Logger();

module.exports = logger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
